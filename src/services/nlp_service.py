"""
NLP Service - Natural Language Processing
M·ª•c ƒë√≠ch: X·ª≠ l√Ω natural language messages t·ª´ user
"""

import logging
from typing import Dict, Any, Optional
from ..models.gemini_client import GeminiClient
from ..utils.logger import get_logger


class NLPService:
    """
    Natural Language Processing Service
    SRP: Ch·ªâ lo vi·ªác x·ª≠ l√Ω natural language
    """
    
    def __init__(self, gemini_client: GeminiClient, logger=None):
        """Initialize NLP service v·ªõi Gemini client"""
        self.gemini = gemini_client
        self.logger = logger or get_logger(__name__)
    
    async def process_natural_language(self, message: str) -> str:
        """
        X·ª≠ l√Ω natural language message v√† tr·∫£ v·ªÅ helpful response
        SRP: Ch·ªâ lo vi·ªác process natural language
        """
        try:
            # Analyze message intent
            intent = self._analyze_message_intent(message)
            
            # Process with Gemini
            response = await self.gemini.process_natural_language(message)
            
            # Format response with intent-based suggestions
            formatted_response = self._format_response_with_suggestions(message, response, intent)
            
            self.logger.info(f"Processed natural language message: {message[:50]}...")
            return formatted_response
            
        except Exception as e:
            self.logger.error(f"Failed to process natural language: {e}")
            return f"‚ùå L·ªói x·ª≠ l√Ω natural language: {str(e)}"
    
    def _analyze_message_intent(self, message: str) -> str:
        """
        Ph√¢n t√≠ch intent c·ªßa message
        Simple keyword-based analysis (c√≥ th·ªÉ enhance v·ªõi ML)
        """
        message_lower = message.lower()
        
        # Intent keywords mapping
        intent_keywords = {
            "store_requirement": ["requirement", "y√™u c·∫ßu", "t√≠nh nƒÉng", "feature", "l∆∞u", "th√™m"],
            "store_bug": ["bug", "l·ªói", "error", "s·ª± c·ªë", "problem", "issue"],
            "get_tests": ["test", "ki·ªÉm tra", "ch·∫°y", "run", "testing"],
            "search": ["t√¨m", "search", "find", "lookup", "query"],
            "analyze": ["ph√¢n t√≠ch", "analyze", "impact", "t√°c ƒë·ªông"],
            "help": ["help", "gi√∫p", "h∆∞·ªõng d·∫´n", "c√°ch", "how"]
        }
        
        # Find matching intent
        for intent, keywords in intent_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                return intent
        
        return "general"
    
    def _format_response_with_suggestions(self, original_message: str, 
                                        gemini_response: str, intent: str) -> str:
        """
        Format response v·ªõi intent-based suggestions
        """
        # Base response from Gemini
        formatted = f"ü§ñ **AI Assistant Response:**\n\n{gemini_response}\n\n"
        
        # Add intent-specific suggestions
        suggestions = self._get_intent_suggestions(intent)
        if suggestions:
            formatted += f"üí° **G·ª£i √Ω c√°c tools h·ªØu √≠ch:**\n{suggestions}"
        
        return formatted
    
    def _get_intent_suggestions(self, intent: str) -> str:
        """
        L·∫•y suggestions d·ª±a tr√™n intent
        """
        suggestions_map = {
            "store_requirement": """
- `store_project_requirement`: L∆∞u requirement m·ªõi
- `store_feature_dependency`: L∆∞u dependency gi·ªØa features
- `store_user_feedback`: L∆∞u feedback t·ª´ user""",
            
            "store_bug": """
- `store_bug_report`: L∆∞u bug report chi ti·∫øt
- `get_bug_impact_analysis`: Ph√¢n t√≠ch t√°c ƒë·ªông c·ªßa bug
- `store_code_change`: L∆∞u code changes li√™n quan""",
            
            "get_tests": """
- `get_tests_to_run`: L·∫•y danh s√°ch tests c·∫ßn ch·∫°y
- `get_comprehensive_test_plan`: T·∫°o test plan chi ti·∫øt
- `get_regression_risk`: ƒê√°nh gi√° r·ªßi ro regression""",
            
            "search": """
- `search_memory`: T√¨m ki·∫øm trong memory system
- `get_related_features`: T√¨m features li√™n quan
- `get_documents_to_update`: T√¨m docs c·∫ßn update""",
            
            "analyze": """
- `get_change_impact_analysis`: Ph√¢n t√≠ch t√°c ƒë·ªông thay ƒë·ªïi
- `get_bug_impact_analysis`: Ph√¢n t√≠ch t√°c ƒë·ªông bug
- `get_regression_risk`: ƒê√°nh gi√° r·ªßi ro regression""",
            
            "help": """
- `natural_language_handler`: Chat v·ªõi AI assistant
- `search_memory`: T√¨m ki·∫øm th√¥ng tin
- Ki·ªÉm tra c√°c tools kh√°c trong MCP server"""
        }
        
        return suggestions_map.get(intent, "")
    
    async def analyze_user_intent_advanced(self, message: str) -> Dict[str, Any]:
        """
        Advanced intent analysis using Gemini
        C√≥ th·ªÉ s·ª≠ d·ª•ng cho future enhancements
        """
        try:
            prompt = f"""
            Ph√¢n t√≠ch intent c·ªßa user message v√† tr·∫£ v·ªÅ JSON:
            
            Message: "{message}"
            
            Tr·∫£ v·ªÅ JSON format:
            {{
                "intent": "store_requirement|store_bug|get_tests|search|analyze|help|general",
                "confidence": 0.0-1.0,
                "entities": ["entity1", "entity2"],
                "suggested_action": "specific action to take",
                "required_params": ["param1", "param2"]
            }}
            """
            
            response = await self.gemini._generate_content_async(prompt)
            return self.gemini._parse_json_response(response.text)
            
        except Exception as e:
            self.logger.warning(f"Advanced intent analysis failed: {e}")
            return {
                "intent": "general",
                "confidence": 0.5,
                "entities": [],
                "suggested_action": "Use natural_language_handler tool",
                "required_params": []
            }
